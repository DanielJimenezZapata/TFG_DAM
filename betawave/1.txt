Tengo estos codigos que estan CASI PERFECTOS simplemente quiero que a√±adas la funcion de buscar por nombre de la cancion arriba en buscar y a la izquierda donde esta el menu. Igual en favoritos. que al entrar aparezcan las canciones favoritas. Lo mismo en crear playlist. Lo mismo en mis canciones y en favoritas. 

auth.css:
:root {
    --primary-color: #1DB954;
    --dark-bg: #121212;
    --light-bg: #181818;
    --text-primary: #FFFFFF;
    --text-secondary: #B3B3B3;
    --error-color: #E74C3C;
    --success-color: #2ECC71;
}

body {
    margin: 0;
    padding: 0;
    font-family: 'Montserrat', sans-serif;
    background-color: var(--dark-bg);
    color: var(--text-primary);
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), 
                      url('https://images.unsplash.com/photo-1470225620780-dba8ba36b745?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80');
    background-size: cover;
    background-position: center;
}

.auth-container {
    background-color: rgba(24, 24, 24, 0.9);
    border-radius: 10px;
    padding: 40px;
    width: 100%;
    max-width: 400px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    text-align: center;
}

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 30px;
    color: var(--text-primary);
    font-size: 28px;
    font-weight: 700;
}

.logo i {
    color: var(--primary-color);
    margin-right: 10px;
    font-size: 32px;
}

.auth-form h2 {
    margin-bottom: 25px;
    font-size: 24px;
    color: var(--text-primary);
}

.form-group {
    margin-bottom: 20px;
    text-align: left;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
    color: var(--text-secondary);
}

.form-group input {
    width: 100%;
    padding: 12px 15px;
    background-color: var(--dark-bg);
    border: 1px solid #333;
    border-radius: 4px;
    color: var(--text-primary);
    font-size: 16px;
    transition: border-color 0.3s;
}

.form-group input:focus {
    border-color: var(--primary-color);
    outline: none;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px;
    border-radius: 20px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    width: 100%;
    transition: background-color 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
}

.btn-primary i {
    margin-right: 8px;
}

.btn-primary:hover {
    background-color: #1ed760;
}

.auth-link {
    margin-top: 20px;
    color: var(--text-secondary);
    font-size: 14px;
}

.auth-link a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 600;
}

.auth-link a:hover {
    text-decoration: underline;
}

.alert {
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
    font-size: 14px;
}

.alert-error {
    background-color: rgba(231, 76, 60, 0.2);
    color: var(--error-color);
}

.alert-success {
    background-color: rgba(46, 204, 113, 0.2);
    color: var(--success-color);
}

styles.css:
:root {
    --primary-color: #1DB954;
    --dark-bg: #121212;
    --light-bg: #181818;
    --lighter-bg: #282828;
    --text-primary: #FFFFFF;
    --text-secondary: #B3B3B3;
    --error-color: #E74C3C;
    --success-color: #2ECC71;
    --info-color: #3498DB;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Montserrat', sans-serif;
    background-color: var(--dark-bg);
    color: var(--text-primary);
}

.app-container {
    display: flex;
    min-height: 100vh;
}

/* Sidebar Styles */
.sidebar {
    width: 240px;
    background-color: var(--sidebar-bg);
    padding: 24px;
    display: flex;
    flex-direction: column;
    height: 100vh;
    position: fixed;
}

.logo {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
    font-size: 24px;
    font-weight: 700;
    color: var(--text-primary);
}

.logo i {
    margin-right: 10px;
    color: var(--primary-color);
    font-size: 28px;
}

.nav-menu {
    list-style: none;
    margin-bottom: 30px;
}

.nav-menu li {
    padding: 12px 0;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    color: var(--text-secondary);
    transition: color 0.2s;
}

.nav-menu li i {
    margin-right: 15px;
    width: 24px;
    text-align: center;
}

.nav-menu li:hover, .nav-menu li.active {
    color: var(--text-primary);
}

.nav-menu li.active {
    color: var(--primary-color);
}

.playlists h3 {
    color: var(--text-secondary);
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 15px;
}

.playlists ul {
    list-style: none;
}

.playlists li {
    padding: 8px 0;
    font-size: 14px;
    cursor: pointer;
    display: flex;
    align-items: center;
    color: var(--text-secondary);
    transition: color 0.2s;
}

.playlists li i {
    margin-right: 15px;
}

.playlists li:hover {
    color: var(--text-primary);
}

/* Main Content Styles */
.main-content {
    margin-left: 240px;
    width: calc(100% - 240px);
    padding: 20px 30px;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
}

.search-bar {
    background-color: var(--light-bg);
    border-radius: 20px;
    padding: 8px 15px;
    display: flex;
    align-items: center;
    width: 300px;
}

.search-bar input {
    background: transparent;
    border: none;
    color: var(--text-primary);
    margin-left: 10px;
    outline: none;
    width: 100%;
}

.user-menu {
    position: relative;
}

.user-btn {
    background-color: var(--light-bg);
    color: var(--text-primary);
    border: none;
    padding: 8px 15px;
    border-radius: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    font-weight: 600;
}

.user-btn i {
    margin-left: 8px;
}

.dropdown-content {
    display: none;
    position: absolute;
    right: 0;
    background-color: var(--lighter-bg);
    min-width: 200px;
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    z-index: 1;
    border-radius: 4px;
    padding: 10px 0;
}

.dropdown-content a {
    color: var(--text-primary);
    padding: 10px 16px;
    text-decoration: none;
    display: block;
    font-size: 14px;
}

.dropdown-content a:hover {
    background-color: var(--light-bg);
}

.dropdown-content a i {
    margin-right: 10px;
    width: 20px;
    text-align: center;
}

.dropdown:hover .dropdown-content {
    display: block;
}

.content h1 {
    font-size: 32px;
    margin-bottom: 30px;
}

.section {
    margin-bottom: 40px;
}

.section h2 {
    font-size: 24px;
    margin-bottom: 20px;
}

.song-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
}

.song-card {
    background-color: var(--lighter-bg);
    border-radius: 6px;
    padding: 16px;
    transition: all 0.3s;
    cursor: pointer;
    position: relative;
}

.song-card:hover {
    background-color: #383838;
    transform: translateY(-5px);
}

.song-cover {
    width: 100%;
    aspect-ratio: 1;
    background-color: #333;
    border-radius: 4px;
    margin-bottom: 12px;
    overflow: hidden;
}

.song-cover img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.song-title {
    font-weight: 600;
    margin-bottom: 4px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.song-artist {
    font-size: 14px;
    color: var(--text-secondary);
}

.song-actions {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    gap: 8px;
}

.song-action-btn {
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    transition: all 0.3s;
}

.song-card:hover .song-action-btn {
    opacity: 1;
}

.song-action-btn:hover {
    background-color: var(--primary-color);
    transform: scale(1.1);
}

.loading-message, .empty-message {
    grid-column: 1 / -1;
    text-align: center;
    padding: 20px;
    color: var(--text-secondary);
}

.loading-message i {
    margin-right: 10px;
}

/* Player Styles */
.player-container {
    background-color: var(--light-bg);
    border-radius: 8px;
    padding: 20px;
    margin-top: 40px;
    position: sticky;
    bottom: 20px;
}

.player-info {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

#now-playing-cover {
    width: 60px;
    height: 60px;
    border-radius: 4px;
    margin-right: 15px;
    object-fit: cover;
}

.song-info {
    flex: 1;
}

#now-playing-title {
    font-weight: 600;
    margin-bottom: 4px;
}

#now-playing-artist {
    font-size: 14px;
    color: var(--text-secondary);
}

#favorite-btn {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 20px;
    cursor: pointer;
    margin-left: 15px;
    transition: all 0.2s;
}

#favorite-btn.active, #favorite-btn:hover {
    color: var(--primary-color);
    transform: scale(1.1);
}

.player-controls {
    width: 100%;
}

#audio-player {
    width: 100%;
    height: 40px;
    border-radius: 4px;
}

/* Add Song Form */
.add-song-form {
    background-color: var(--light-bg);
    border-radius: 8px;
    padding: 20px;
    margin-top: 40px;
}

.add-song-form h2 {
    margin-bottom: 20px;
    font-size: 20px;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
    color: var(--text-secondary);
}

.form-group input {
    width: 100%;
    padding: 10px 15px;
    background-color: var(--lighter-bg);
    border: 1px solid #333;
    border-radius: 4px;
    color: var(--text-primary);
    font-size: 16px;
    transition: border-color 0.3s;
}

.form-group input:focus {
    border-color: var(--primary-color);
    outline: none;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 20px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s;
}

.btn-primary i {
    margin-right: 8px;
}

.btn-primary:hover {
    background-color: #1ed760;
}

.btn-primary:disabled {
    background-color: #535353;
    cursor: not-allowed;
}

/* Alert Styles */
.alert {
    padding: 12px 15px;
    border-radius: 4px;
    margin-bottom: 20px;
    font-size: 14px;
    animation: fadeIn 0.3s;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

.alert-error {
    background-color: rgba(231, 76, 60, 0.2);
    color: var(--error-color);
    border-left: 4px solid var(--error-color);
}

.alert-success {
    background-color: rgba(46, 204, 113, 0.2);
    color: var(--success-color);
    border-left: 4px solid var(--success-color);
}

.alert-info {
    background-color: rgba(52, 152, 219, 0.2);
    color: var(--info-color);
    border-left: 4px solid var(--info-color);
}

/* Responsive Styles */
@media (max-width: 768px) {
    .sidebar {
        width: 70px;
        padding: 15px 10px;
    }
    
    .logo span, .nav-menu li span, .playlists h3, .playlists li span {
        display: none;
    }
    
    .logo i, .nav-menu li i, .playlists li i {
        margin-right: 0;
        font-size: 20px;
    }
    
    .main-content {
        margin-left: 70px;
        width: calc(100% - 70px);
        padding: 15px;
    }
    
    header {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .search-bar {
        width: 100%;
        margin-bottom: 15px;
    }
    
    .user-menu {
        width: 100%;
    }
    
    .dropdown-content {
        width: 100%;
    }
    
    .song-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
}

main.js:
document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const audioPlayer = document.getElementById('audio-player');
    const songList = document.getElementById('song-list');
    const favoritesList = document.getElementById('favorites-list');
    const nowPlayingTitle = document.getElementById('now-playing-title');
    const nowPlayingArtist = document.getElementById('now-playing-artist');
    const nowPlayingCover = document.getElementById('now-playing-cover');
    const favoriteBtn = document.getElementById('favorite-btn');
    const addSongBtn = document.getElementById('add-song-btn');
    
    let currentSongId = null;
    
    // Load initial data
    loadSongs();
    loadFavorites();
    
    // Event listeners
    addSongBtn.addEventListener('click', addSong);
    favoriteBtn.addEventListener('click', toggleCurrentFavorite);
    
    // Functions
    function loadSongs() {
        fetch('/api/songs')
            .then(response => response.json())
            .then(songs => {
                renderSongs(songs, songList, false);
            })
            .catch(error => {
                console.error('Error loading songs:', error);
                songList.innerHTML = '<div class="error-message">Error al cargar canciones</div>';
            });
    }
    
    function loadFavorites() {
        fetch('/api/favorites')
            .then(response => response.json())
            .then(favorites => {
                renderSongs(favorites, favoritesList, true);
            })
            .catch(error => {
                console.error('Error loading favorites:', error);
                favoritesList.innerHTML = '<div class="error-message">Error al cargar favoritos</div>';
            });
    }
    
    function renderSongs(songs, container, isFavoriteList) {
        container.innerHTML = '';
        
        if (songs.length === 0) {
            const emptyMessage = document.createElement('div');
            emptyMessage.className = 'empty-message';
            emptyMessage.textContent = isFavoriteList ? 
                'No tienes canciones favoritas a√∫n' : 
                'No tienes canciones a√∫n. ¬°A√±ade alguna!';
            container.appendChild(emptyMessage);
            return;
        }
        
        songs.forEach(song => {
            const songCard = document.createElement('div');
            songCard.className = 'song-card';
            songCard.dataset.songId = song.id;
            
            // Extract video ID from YouTube URL for thumbnail
            let videoId = null;
            try {
                const url = new URL(song.url);
                videoId = url.searchParams.get('v') || url.pathname.split('/').pop();
            } catch (e) {
                console.error('Error parsing URL:', e);
            }
            
            const coverUrl = videoId ? 
                `https://img.youtube.com/vi/${videoId}/mqdefault.jpg` : 
                'https://via.placeholder.com/300';
            
            songCard.innerHTML = `
                <div class="song-cover">
                    <img src="${coverUrl}" alt="Portada de canci√≥n">
                </div>
                <div class="song-title">${song.name}</div>
                <div class="song-artist">${document.querySelector('.username').textContent}</div>
                <div class="song-actions">
                    <button class="song-action-btn favorite-btn" data-song-id="${song.id}">
                        <i class="far fa-heart"></i>
                    </button>
                    <button class="song-action-btn download-btn" data-song-id="${song.id}">
                        <i class="fas fa-download"></i>
                    </button>
                    ${!isFavoriteList ? `
                    <button class="song-action-btn delete-btn" data-song-id="${song.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                    ` : ''}
                </div>
            `;
            
            // Add event listeners to action buttons
            const favoriteBtn = songCard.querySelector('.favorite-btn');
            const downloadBtn = songCard.querySelector('.download-btn');
            const deleteBtn = songCard.querySelector('.delete-btn');
            
            favoriteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                toggleFavorite(song.id, favoriteBtn);
            });
            
            downloadBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                showDownloadMenu(song.id, e);
            });
            
            if (deleteBtn) {
                deleteBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    deleteSong(song.id);
                });
            }
            
            // Check if song is favorite and update button
            checkFavoriteStatus(song.id).then(isFavorite => {
                if (isFavorite) {
                    favoriteBtn.innerHTML = '<i class="fas fa-heart"></i>';
                    favoriteBtn.classList.add('active');
                }
            });
            
            // Play song when card is clicked
            songCard.addEventListener('click', () => playSong(song.id, song.name, coverUrl));
            
            container.appendChild(songCard);
        });
    }
    
    function playSong(songId, songName, coverUrl) {
        currentSongId = songId;
        
        fetch('/api/play', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ song_id: songId })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw err; });
            }
            return response.json();
        })
        .then(data => {
            if (data.audio_stream_url) {
                // Update player UI
                nowPlayingTitle.textContent = songName;
                nowPlayingArtist.textContent = document.querySelector('.username').textContent;
                nowPlayingCover.src = coverUrl;
                
                // Set audio source and play
                audioPlayer.src = data.audio_stream_url;
                audioPlayer.play()
                    .then(() => {
                        console.log(`Reproduciendo canci√≥n ID: ${songId}`);
                        updateFavoriteButton(songId);
                    })
                    .catch(e => {
                        console.error("Error al reproducir:", e);
                        if (data.fallback_url) {
                            window.open(data.fallback_url, '_blank');
                        }
                    });
            } else if (data.fallback_url) {
                window.open(data.fallback_url, '_blank');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            if (error.status === 401) {
                window.location.href = '/login';
            } else {
                alert('Error: ' + (error.message || 'No se pudo reproducir la canci√≥n'));
                if (error.fallback_url) {
                    window.open(error.fallback_url, '_blank');
                }
            }
        });
    }
    
    function addSong() {
        const songName = document.getElementById('song-name').value;
        const songUrl = document.getElementById('song-url').value;
        
        if (!songName || !songUrl) {
            showAlert('Por favor ingresa nombre y URL de la canci√≥n', 'error');
            return;
        }
        
        // Validate YouTube URL
        if (!isValidYouTubeUrl(songUrl)) {
            showAlert('Por favor ingresa una URL v√°lida de YouTube', 'error');
            return;
        }
        
        fetch('/api/add_song', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                song_name: songName,
                song_url: songUrl
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('Canci√≥n a√±adida correctamente!', 'success');
                document.getElementById('song-name').value = '';
                document.getElementById('song-url').value = '';
                loadSongs();
            } else {
                showAlert('Error: ' + (data.error || 'No se pudo a√±adir la canci√≥n'), 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('Error al conectar con el servidor', 'error');
        });
    }
    
    function isValidYouTubeUrl(url) {
        const pattern = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/;
        return pattern.test(url);
    }
    
    function deleteSong(songId) {
        if (!confirm('¬øEst√°s seguro de que quieres eliminar esta canci√≥n?')) {
            return;
        }
        
        fetch('/api/delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ song_id: songId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('Canci√≥n eliminada correctamente', 'success');
                loadSongs();
                loadFavorites();
                
                // If deleted song is currently playing, stop it
                if (currentSongId === songId) {
                    audioPlayer.pause();
                    audioPlayer.src = '';
                    nowPlayingTitle.textContent = 'No hay canci√≥n seleccionada';
                    nowPlayingCover.src = 'https://via.placeholder.com/60';
                    currentSongId = null;
                    updateFavoriteButton(null);
                }
            } else {
                showAlert('Error al eliminar la canci√≥n', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('Error al eliminar la canci√≥n', 'error');
        });
    }
    
    function checkFavoriteStatus(songId) {
        return fetch('/api/is_favorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ song_id: songId })
        })
        .then(response => response.json())
        .then(data => data.is_favorite)
        .catch(error => {
            console.error('Error checking favorite status:', error);
            return false;
        });
    }
    
    function toggleFavorite(songId, button) {
        fetch('/api/toggle_favorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ song_id: songId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.is_favorite !== undefined) {
                if (button) {
                    button.innerHTML = data.is_favorite ? 
                        '<i class="fas fa-heart"></i>' : 
                        '<i class="far fa-heart"></i>';
                    button.classList.toggle('active', data.is_favorite);
                }
                
                // Update favorite button in player if this is the current song
                if (currentSongId === songId) {
                    updateFavoriteButton(songId);
                }
                
                // Reload favorites list
                loadFavorites();
            }
        })
        .catch(error => {
            console.error('Error:', error);
            if (error.status === 401) {
                window.location.href = '/login';
            }
        });
    }
    
    function toggleCurrentFavorite() {
        if (currentSongId) {
            toggleFavorite(currentSongId, favoriteBtn);
        }
    }
    
    function updateFavoriteButton(songId) {
        if (!songId) {
            favoriteBtn.innerHTML = '<i class="far fa-heart"></i>';
            favoriteBtn.classList.remove('active');
            return;
        }
        
        checkFavoriteStatus(songId).then(isFavorite => {
            favoriteBtn.innerHTML = isFavorite ? 
                '<i class="fas fa-heart"></i>' : 
                '<i class="far fa-heart"></i>';
            favoriteBtn.classList.toggle('active', isFavorite);
        });
    }
    
    function showDownloadMenu(songId, event) {
        const menu = document.createElement('div');
        menu.className = 'format-menu';
        menu.innerHTML = `
            <div class="format-option" data-format="mp3">MP3</div>
            <div class="format-option" data-format="wav">WAV</div>
            <div class="format-option" data-format="ogg">OGG</div>
        `;
        
        const rect = event.target.getBoundingClientRect();
        menu.style.position = 'fixed';
        menu.style.left = `${rect.left}px`;
        menu.style.top = `${rect.bottom + window.scrollY}px`;
        menu.style.zIndex = '1000';
        
        menu.querySelectorAll('.format-option').forEach(option => {
            option.addEventListener('click', (e) => {
                e.stopPropagation();
                downloadSong(songId, option.dataset.format);
                document.body.removeChild(menu);
            });
        });
        
        const closeMenu = () => {
            if (document.body.contains(menu)) {
                document.body.removeChild(menu);
            }
            document.removeEventListener('click', closeMenu);
        };
        
        document.addEventListener('click', closeMenu);
        document.body.appendChild(menu);
    }
    
    function downloadSong(songId, format) {
        showAlert(`Preparando descarga en formato ${format.toUpperCase()}...`, 'info');
        
        fetch('/api/download', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                song_id: songId,
                format: format
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error en la descarga');
            }
            return response.blob();
        })
        .then(blob => {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `cancion_${songId}.${format}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('Error al descargar la canci√≥n', 'error');
        });
    }
    
    function showAlert(message, type) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
        
        const mainContent = document.querySelector('.main-content');
        mainContent.insertBefore(alert, mainContent.firstChild);
        
        setTimeout(() => {
            alert.style.opacity = '0';
            setTimeout(() => alert.remove(), 300);
        }, 3000);
    }
    
    // Audio player event listeners
    audioPlayer.addEventListener('play', () => {
        console.log('Audio started playing');
    });
    
    audioPlayer.addEventListener('pause', () => {
        console.log('Audio paused');
    });
    
    audioPlayer.addEventListener('ended', () => {
        console.log('Audio ended');
    });
    
    audioPlayer.addEventListener('error', (e) => {
        console.error('Audio error:', e);
        showAlert('Error al reproducir la canci√≥n', 'error');
    });
});

index.html:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music Player - {{ username }}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/static/css/styles.css">
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <i class="fas fa-music"></i>
                <span>MusicPlayer</span>
            </div>
            <ul class="nav-menu">
                <li class="active"><i class="fas fa-home"></i> <span>Inicio</span></li>
                <li><i class="fas fa-search"></i> <span>Buscar</span></li>
                <li><i class="fas fa-heart"></i> <span>Favoritos</span></li>
                <li><i class="fas fa-plus-circle"></i> <span>Crear Playlist</span></li>
            </ul>
            <div class="playlists">
                <h3>TUS PLAYLISTS</h3>
                <ul>
                    <li><i class="fas fa-list-music"></i> <span>Mis Canciones</span></li>
                    <li><i class="fas fa-star"></i> <span>Favoritas</span></li>
                </ul>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <header>
                <div class="search-bar">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="Buscar canciones, artistas...">
                </div>
                <div class="user-menu">
                    <div class="dropdown">
                        <button class="user-btn">
                            <span class="username">{{ username }}</span>
                            <i class="fas fa-user"></i>
                        </button>
                        <div class="dropdown-content">
                            <a href="#"><i class="fas fa-user"></i> Perfil</a>
                            <a href="#"><i class="fas fa-cog"></i> Configuraci√≥n</a>
                            <a href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt"></i> Cerrar Sesi√≥n</a>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Content -->
            <div class="content">
                <h1>Bienvenido, <span class="username">{{ username }}</span></h1>
                
                <!-- My Songs -->
                <div class="section">
                    <h2>Mis Canciones</h2>
                    <div class="song-grid" id="song-list">
                        <!-- Songs will be loaded here -->
                        <div class="loading-message">
                            <i class="fas fa-spinner fa-spin"></i> Cargando canciones...
                        </div>
                    </div>
                </div>

                <!-- Favorites -->
                <div class="section">
                    <h2>Mis Favoritos</h2>
                    <div class="song-grid" id="favorites-list">
                        <!-- Favorites will be loaded here -->
                        <div class="loading-message">
                            <i class="fas fa-spinner fa-spin"></i> Cargando favoritos...
                        </div>
                    </div>
                </div>

                <!-- Player -->
                <div class="player-container">
                    <div class="player-info">
                        <img id="now-playing-cover" src="https://via.placeholder.com/60" alt="Album Cover">
                        <div class="song-info">
                            <div id="now-playing-title">No hay canci√≥n seleccionada</div>
                            <div id="now-playing-artist">{{ username }}</div>
                        </div>
                        <button id="favorite-btn"><i class="far fa-heart"></i></button>
                    </div>
                    <div class="player-controls">
                        <audio id="audio-player" controls></audio>
                    </div>
                </div>

                <!-- Add Song -->
                <div class="add-song-form">
                    <h2>A√±adir Nueva Canci√≥n</h2>
                    <div class="form-group">
                        <input type="text" id="song-name" placeholder="Nombre de la canci√≥n" required>
                    </div>
                    <div class="form-group">
                        <input type="url" id="song-url" placeholder="URL de YouTube (ej: https://youtu.be/...)" required>
                    </div>
                    <button id="add-song-btn" class="btn-primary">
                        <i class="fas fa-plus"></i> A√±adir Canci√≥n
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/main.js"></script>
</body>
</html>

login.html:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iniciar Sesi√≥n - MusicPlayer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/static/css/auth.css">
</head>
<body>
    <div class="auth-container">
        <div class="logo">
            <i class="fas fa-music"></i>
            <span>MusicPlayer</span>
        </div>
        
        <div class="auth-form">
            <h2>Iniciar Sesi√≥n</h2>
            
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ category }}">{{ message }}</div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            
            <form method="POST">
                <div class="form-group">
                    <label for="username"><i class="fas fa-user"></i> Usuario</label>
                    <input type="text" id="username" name="username" required>
                </div>
                <div class="form-group">
                    <label for="password"><i class="fas fa-lock"></i> Contrase√±a</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit" class="btn-primary">
                    <i class="fas fa-sign-in-alt"></i> Ingresar
                </button>
            </form>
            <p class="auth-link">¬øNo tienes cuenta? <a href="{{ url_for('register') }}">Reg√≠strate</a></p>
        </div>
    </div>
</body>
</html>

register.html:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro - MusicPlayer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/static/css/auth.css">
</head>
<body>
    <div class="auth-container">
        <div class="logo">
            <i class="fas fa-music"></i>
            <span>MusicPlayer</span>
        </div>
        
        <div class="auth-form">
            <h2>Registro</h2>
            
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ category }}">{{ message }}</div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            
            <form method="POST">
                <div class="form-group">
                    <label for="username"><i class="fas fa-user"></i> Usuario</label>
                    <input type="text" id="username" name="username" required>
                </div>
                <div class="form-group">
                    <label for="email"><i class="fas fa-envelope"></i> Email (opcional)</label>
                    <input type="email" id="email" name="email">
                </div>
                <div class="form-group">
                    <label for="password"><i class="fas fa-lock"></i> Contrase√±a</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit" class="btn-primary">
                    <i class="fas fa-user-plus"></i> Registrarse
                </button>
            </form>
            <p class="auth-link">¬øYa tienes cuenta? <a href="{{ url_for('login') }}">Inicia sesi√≥n</a></p>
        </div>
    </div>
</body>
</html>

app.py:
from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for, session, flash
from functools import wraps
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
import yt_dlp
import tempfile
import os
import traceback

app = Flask(__name__)
app.secret_key = 'tu_clave_secreta_super_segura'
app.config['STATIC_FOLDER'] = 'static'

# Database Functions
def init_db():
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE NOT NULL,
                  password TEXT NOT NULL,
                  email TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS songs
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  url TEXT NOT NULL,
                  user_id INTEGER NOT NULL,
                  FOREIGN KEY(user_id) REFERENCES users(id))''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS favorites
                 (user_id INTEGER NOT NULL,
                  song_id INTEGER NOT NULL,
                  PRIMARY KEY (user_id, song_id),
                  FOREIGN KEY(user_id) REFERENCES users(id),
                  FOREIGN KEY(song_id) REFERENCES songs(id))''')
    
    conn.commit()
    conn.close()

def add_user(username, password, email=None):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    try:
        hashed_pw = generate_password_hash(password)
        c.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
                 (username, hashed_pw, email))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def verify_user(username, password):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT id, username, password FROM users WHERE username=?", (username,))
    user = c.fetchone()
    conn.close()
    if user and check_password_hash(user[2], password):
        return {'id': user[0], 'username': user[1]}
    return None

def add_song(name, url, user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    try:
        c.execute("INSERT INTO songs (name, url, user_id) VALUES (?, ?, ?)",
                 (name, url, user_id))
        conn.commit()
        return c.lastrowid
    except sqlite3.IntegrityError:
        return None
    finally:
        conn.close()

def get_songs(user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT id, name, url FROM songs WHERE user_id=?", (user_id,))
    songs = [{'id': row[0], 'name': row[1], 'url': row[2]} for row in c.fetchall()]
    conn.close()
    return songs

def get_song_url(song_id, user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT url FROM songs WHERE id=? AND user_id=?", (song_id, user_id))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def delete_song(song_id, user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("DELETE FROM songs WHERE id=? AND user_id=?", (song_id, user_id))
    c.execute("DELETE FROM favorites WHERE song_id=?", (song_id,))
    conn.commit()
    rows_affected = c.rowcount
    conn.close()
    return rows_affected > 0

def add_favorite(user_id, song_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    try:
        c.execute("INSERT INTO favorites VALUES (?, ?)", (user_id, song_id))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_favorite(user_id, song_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("DELETE FROM favorites WHERE user_id=? AND song_id=?", (user_id, song_id))
    conn.commit()
    rows_affected = c.rowcount
    conn.close()
    return rows_affected > 0

def get_favorites(user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute('''SELECT s.id, s.name, s.url 
                 FROM songs s JOIN favorites f ON s.id = f.song_id 
                 WHERE f.user_id=?''', (user_id,))
    favorites = [{'id': row[0], 'name': row[1], 'url': row[2]} for row in c.fetchall()]
    conn.close()
    return favorites

def is_favorite(user_id, song_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT 1 FROM favorites WHERE user_id=? AND song_id=?", (user_id, song_id))
    result = c.fetchone() is not None
    conn.close()
    return result

# Helper decorator
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Debes iniciar sesi√≥n para acceder a esta p√°gina', 'error')
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function

# Routes
@app.route('/')
@login_required
def index():
    return render_template('index.html', username=session.get('username'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        user = verify_user(username, password)
        
        if user:
            session['user_id'] = user['id']
            session['username'] = user['username']
            next_url = request.args.get('next') or url_for('index')
            return redirect(next_url)
        flash('Usuario o contrase√±a incorrectos', 'error')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        email = request.form.get('email')
        
        if add_user(username, password, email):
            flash('Registro exitoso! Por favor inicia sesi√≥n', 'success')
            return redirect(url_for('login'))
        flash('El usuario ya existe', 'error')
    return render_template('register.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('Has cerrado sesi√≥n correctamente', 'info')
    return redirect(url_for('login'))

# API Endpoints
@app.route('/api/songs', methods=['GET'])
@login_required
def get_songs_route():
    try:
        songs = get_songs(session['user_id'])
        return jsonify(songs)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/play', methods=['POST'])
@login_required
def play_song():
    try:
        data = request.json
        song_id = data.get('song_id')
        song_url = get_song_url(song_id, session['user_id'])
        
        if not song_url:
            return jsonify({'error': 'Canci√≥n no encontrada'}), 404
        
        ydl_opts = {
            'format': 'bestaudio/best',
            'quiet': True,
            'extract_flat': True,
            'force_ipv4': True,
            'socket_timeout': 10
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(song_url, download=False)
            return jsonify({
                'audio_stream_url': info['url'],
                'song_id': song_id
            })
    except Exception as e:
        traceback.print_exc()
        return jsonify({'error': str(e), 'fallback_url': song_url}), 500

@app.route('/api/download', methods=['POST'])
@login_required
def download_song():
    try:
        data = request.json
        song_id = data.get('song_id')
        format_type = data.get('format', 'mp3')
        song_url = get_song_url(song_id, session['user_id'])
        
        if not song_url:
            return jsonify({'error': 'Canci√≥n no encontrada'}), 404
        
        temp_dir = tempfile.mkdtemp()
        ydl_opts = {
            'format': 'bestaudio/best',
            'quiet': True,
            'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': format_type,
                'preferredquality': '192',
            }]
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(song_url, download=True)
            filepath = ydl.prepare_filename(info).replace('.webm', f'.{format_type}').replace('.m4a', f'.{format_type}')
            return send_file(filepath, as_attachment=True, download_name=f"{info['title']}.{format_type}")
    except Exception as e:
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

@app.route('/api/delete', methods=['POST'])
@login_required
def delete_song_route():
    try:
        data = request.json
        if delete_song(data.get('song_id'), session['user_id']):
            return jsonify({'success': True})
        return jsonify({'error': 'Canci√≥n no encontrada'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/add_song', methods=['POST'])
@login_required
def add_song_route():
    try:
        data = request.json
        song_name = data.get('song_name')
        song_url = data.get('song_url')
        user_id = session['user_id']
        
        if not song_name or not song_url:
            return jsonify({'error': 'Nombre y URL son requeridos'}), 400
        
        if 'youtube.com' not in song_url and 'youtu.be' not in song_url:
            return jsonify({'error': 'Solo se aceptan URLs de YouTube'}), 400
            
        song_id = add_song(song_name, song_url, user_id)
        if song_id:
            new_song = {
                'id': song_id,
                'name': song_name,
                'url': song_url,
                'user_id': user_id
            }
            return jsonify({'success': True, 'song': new_song})
        return jsonify({'error': 'La canci√≥n ya existe'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/favorites', methods=['GET'])
@login_required
def get_favorites_route():
    try:
        favorites = get_favorites(session['user_id'])
        return jsonify(favorites)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/toggle_favorite', methods=['POST'])
@login_required
def toggle_favorite():
    try:
        data = request.json
        song_id = data.get('song_id')
        user_id = session['user_id']
        
        if is_favorite(user_id, song_id):
            remove_favorite(user_id, song_id)
            return jsonify({'is_favorite': False})
        else:
            if add_favorite(user_id, song_id):
                return jsonify({'is_favorite': True})
            return jsonify({'error': 'Canci√≥n no encontrada'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/is_favorite', methods=['POST'])
@login_required
def is_favorite_route():
    try:
        data = request.json
        song_id = data.get('song_id')
        user_id = session['user_id']
        result = is_favorite(user_id, song_id)
        return jsonify({'is_favorite': result})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == "__main__":
    init_db()
    app.run(debug=True, host="0.0.0.0", port=8501)

ddbb.py:
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash

def init_db():
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE NOT NULL,
                  password TEXT NOT NULL,
                  email TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS songs
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  url TEXT NOT NULL,
                  user_id INTEGER NOT NULL,
                  FOREIGN KEY(user_id) REFERENCES users(id))''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS favorites
                 (user_id INTEGER NOT NULL,
                  song_id INTEGER NOT NULL,
                  PRIMARY KEY (user_id, song_id),
                  FOREIGN KEY(user_id) REFERENCES users(id),
                  FOREIGN KEY(song_id) REFERENCES songs(id))''')
    
    conn.commit()
    conn.close()

def add_user(username, password, email=None):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    try:
        hashed_pw = generate_password_hash(password)
        c.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
                 (username, hashed_pw, email))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def verify_user(username, password):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT id, username, password FROM users WHERE username=?", (username,))
    user = c.fetchone()
    conn.close()
    if user and check_password_hash(user[2], password):
        return {'id': user[0], 'username': user[1]}
    return None

def add_song(name, url, user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    try:
        c.execute("INSERT INTO songs (name, url, user_id) VALUES (?, ?, ?)",
                 (name, url, user_id))
        conn.commit()
        return c.lastrowid
    except sqlite3.IntegrityError:
        return None
    finally:
        conn.close()

def get_songs(user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT id, name, url FROM songs WHERE user_id=?", (user_id,))
    songs = [{'id': row[0], 'name': row[1], 'url': row[2]} for row in c.fetchall()]
    conn.close()
    return songs

def get_song_url(song_id, user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT url FROM songs WHERE id=? AND user_id=?", (song_id, user_id))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def delete_song(song_id, user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("DELETE FROM songs WHERE id=? AND user_id=?", (song_id, user_id))
    c.execute("DELETE FROM favorites WHERE song_id=?", (song_id,))
    conn.commit()
    rows_affected = c.rowcount
    conn.close()
    return rows_affected > 0

def add_favorite(user_id, song_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    try:
        c.execute("INSERT INTO favorites VALUES (?, ?)", (user_id, song_id))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_favorite(user_id, song_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("DELETE FROM favorites WHERE user_id=? AND song_id=?", (user_id, song_id))
    conn.commit()
    rows_affected = c.rowcount
    conn.close()
    return rows_affected > 0

def get_favorites(user_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute('''SELECT s.id, s.name, s.url 
                 FROM songs s JOIN favorites f ON s.id = f.song_id 
                 WHERE f.user_id=?''', (user_id,))
    favorites = [{'id': row[0], 'name': row[1], 'url': row[2]} for row in c.fetchall()]
    conn.close()
    return favorites

def is_favorite(user_id, song_id):
    conn = sqlite3.connect('music.db')
    c = conn.cursor()
    c.execute("SELECT 1 FROM favorites WHERE user_id=? AND song_id=?", (user_id, song_id))
    result = c.fetchone() is not None
    conn.close()
    return result